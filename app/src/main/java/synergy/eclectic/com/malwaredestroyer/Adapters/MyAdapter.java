package synergy.eclectic.com.malwaredestroyer.Adapters;

import android.content.Context;
import android.content.Intent;
import android.support.v7.widget.CardView;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.ImageView;
import android.widget.RatingBar;
import android.widget.TextView;


import java.util.ArrayList;
import java.util.List;

import synergy.eclectic.com.malwaredestroyer.AppDetail;
import synergy.eclectic.com.malwaredestroyer.R;

/**
 * Created by Emeka on 9/26/2017.
 */

public class MyAdapter extends RecyclerView.Adapter<MyAdapter.ViewHolder> implements Filterable {
    private String[] mDataset;
    private ArrayList<AppDetail> listItems;
    private ArrayList<AppDetail> original_list;
    private AppDetail listItem;
    private String name;
    private int service;

    public MyAdapter(ArrayList<AppDetail> listItems, Context context) {
        this.listItems = listItems;
        this.context = context;
        this.original_list = listItems;
    }

    private Context context;

    @Override
    public Filter getFilter() {
        return new Filter() {
            @SuppressWarnings("unchecked")
            @Override
            protected void publishResults(CharSequence constraint, FilterResults results) {
                listItems = (ArrayList<AppDetail>) results.values;
                MyAdapter.this.notifyDataSetChanged();
            }

            @Override
            protected FilterResults performFiltering(CharSequence constraint) {
                List<AppDetail> filteredResults;
                if (constraint.length() == 0) {
                    filteredResults = original_list;
                } else {
                    filteredResults = getFilteredResults(constraint.toString().toLowerCase());
                }

                FilterResults results = new FilterResults();
                results.values = filteredResults;

                return results;
            }
        };
    }

    private List<AppDetail> getFilteredResults(String constraint) {
        List<AppDetail> results = new ArrayList<>();

        for (AppDetail item : original_list) {
            if (item.getName().toLowerCase().contains(constraint)) {
                results.add(item);
            }
        }
        return results;
    }

    // Provide a reference to the views for each data item
    // Complex data items may need more than one view per item, and
    // you provide access to all the views for a data item in a view holder
    public static class ViewHolder extends RecyclerView.ViewHolder {
        // each data item is just a string in this case
        public TextView mTextViewName;
        public TextView mTextViewPackage;
        public CardView cardView;
        public ImageView imageView;
        public ViewHolder(View v) {
            super(v);
            mTextViewName = v.findViewById(R.id.app_name);
            mTextViewPackage = v.findViewById(R.id.package_name);
            cardView = v.findViewById(R.id.card);
            imageView = v.findViewById(R.id.appIcon);
        }
    }

    // Provide a suitable constructor (depends on the kind of dataset)
    public MyAdapter(String[] myDataset) {
        mDataset = myDataset;
    }

    // Create new views (invoked by the layout manager)
    @Override
    public MyAdapter.ViewHolder onCreateViewHolder(ViewGroup parent,
                                                   int viewType) {
        // create a new view
        View v = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.app_item, parent, false);
        // set the view's size, margins, paddings and layout parameters

        return new ViewHolder(v);
    }

    // Replace the contents of a view (invoked by the layout manager)
    @Override
    public void onBindViewHolder(ViewHolder holder, final int position) {

        // - get element from your dataset at this position
        // - replace the contents of the view with that element
        //holder.mTextView.setText(mDataset[position]);

        listItem = listItems.get(position);

        name = listItem.getName();
        holder.mTextViewName.setText(name);
        holder.mTextViewPackage.setText(listItem.getPackageName());
        holder.cardView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //do something here.
                ArrayList<String> arrayList = listItem.getPermissions();
                System.out.println(arrayList);
            }
        });
        holder.imageView.setImageDrawable(listItem.getIcon());
    }

    // Return the size of your dataset (invoked by the layout manager)
    @Override
    public int getItemCount() {
        return listItems.size();
    }

}
