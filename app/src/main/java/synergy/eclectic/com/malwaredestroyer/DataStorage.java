package synergy.eclectic.com.malwaredestroyer;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Created by Emeka Chukumah on 04/02/2016.
 */
public class DataStorage extends SQLiteOpenHelper {
    private static final int DATABASE_VERSION = 1;
    private static final String DATABASE_NAME = "Malwarechopper.db";
    private static final String TABLE_NAME = "application";
    private static final String COLUMN_ID = "id";
    private static final String COLUMN_APP_NAME = "app_name";
    private static final String COLUMN_APP_ICON = "icon";
    private static final String COLUMN_APP_PACKAGE_NAME = "package_name";
    private static final String COLUMN_APP_DANGER_LEVEL = "level";

    private static final String TABLE_NAME_2 = "permissions";
    private static final String COLUMN_APP_PERMISSIONS = "permissions";



    private static final String CREATE_TABLE = "create table application (id integer PRIMARY KEY AUTOINCREMENT not null , " +
            "package_name text not null unique, app_name text not null, permissions text not null, level text);";

    private static final String CREATE_TABLE_2 = "create table permissions (id integer PRIMARY KEY AUTOINCREMENT not null , " +
            "permission text not null unique, app_name text not null, permissions text not null);";


    private SQLiteDatabase db;

    public DataStorage(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase sqLiteDatabase) {
        sqLiteDatabase.execSQL(CREATE_TABLE);
        this.db = sqLiteDatabase;
    }

    @Override
    public void onUpgrade(SQLiteDatabase sqLiteDatabase, int i, int i1) {
        String query = "DROP TABLE IF EXISTS" + TABLE_NAME;
        sqLiteDatabase.execSQL(query);
        this.onCreate(sqLiteDatabase);

    }

    long insertData(AppDetail appDetail){
        db = getWritableDatabase();
        ContentValues values = new ContentValues();


        String query = "SELECT * FROM application";
        Cursor cursor = db.rawQuery(query, null);
        //int count = cursor.getCount();

        values.put(COLUMN_APP_PACKAGE_NAME, appDetail.getPackageName());
        values.put(COLUMN_APP_NAME, appDetail.getName());
        values.put(COLUMN_APP_PERMISSIONS, Arrays.toString(appDetail.getPermissions()));
        values.put(COLUMN_APP_DANGER_LEVEL, appDetail.getDanger_level());

        long result = db.insert(TABLE_NAME,null,values);
        //db.insertWithOnConflict(TABLE_NAME_3, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        cursor.close();
        return result;
    }

    ArrayList<AppDetail> getAPPs(){
        db = getReadableDatabase();
        String query = "SELECT * FROM "+TABLE_NAME;

        Cursor cursor = db.rawQuery(query, null);
        ArrayList<AppDetail> appDetailArrayList = new ArrayList<>();

        if(cursor.moveToFirst()){
            do {
                String packageName = cursor.getString(1);
                String name = cursor.getString(2);
                String permissions = cursor.getString(3);
                String level = cursor.getString(4);
                String arr_permissions[] = permissions.split(",");
                AppDetail appDetail = new AppDetail(name,packageName,arr_permissions);
                appDetail.setDanger_level(Integer.parseInt(level));
                appDetailArrayList.add(appDetail);
            }
            while (cursor.moveToNext());
        }

        cursor.close();
        return appDetailArrayList;
    }
}
