package synergy.eclectic.com.malwaredestroyer

import android.content.Intent
import android.content.pm.ApplicationInfo
import android.content.pm.PackageInfo
import android.content.pm.PackageManager
import android.support.v7.app.AppCompatActivity
import android.os.Bundle
import android.support.v4.widget.SwipeRefreshLayout
import android.support.v7.widget.LinearLayoutManager
import android.support.v7.widget.RecyclerView
import android.util.Log
import android.widget.TextView
import synergy.eclectic.com.malwaredestroyer.Adapters.MyAdapter

/**
 * Created by Emeka David Chukumah on 2/15/2018.
 */

class MainActivity : AppCompatActivity() {
    private var manager: PackageManager? = null
    private var all_apps: ArrayList<AppDetail> = ArrayList()
    private var mRecyclerView: RecyclerView? = null
    private var mAdapter: MyAdapter? = null
    private var mLayoutManager: RecyclerView.LayoutManager? = null
    private var swipeRefreshLayout: SwipeRefreshLayout? = null
    private var packageInfo: PackageInfo? = null
    //private var apps: MutableList<AppDetail>? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        manager = packageManager
        mRecyclerView = findViewById(R.id.my_recycler_view)

        rubbish()
        System.out.println(all_apps.size)
        val totalApps = findViewById<TextView>(R.id.num_of_apps)
        totalApps.text = all_apps.size.toString()

        mRecyclerView?.setHasFixedSize(true)

        // use a linear layout manager
        mLayoutManager = LinearLayoutManager(this)
        mRecyclerView?.layoutManager = mLayoutManager
        swipeRefreshLayout = findViewById(R.id.swipe)
        swipeRefreshLayout?.setColorSchemeResources(R.color.colorPrimary,
                R.color.colorPrimaryDark,
                R.color.colorAccent)

        // specify an adapter (see also next example)
        mAdapter = MyAdapter(all_apps, this)
        //mAdapter = new MyAdapter(myDataset);
        mRecyclerView?.setAdapter(mAdapter)

    }

    private fun rubbish() {
        val i = Intent(Intent.ACTION_MAIN, null)
        i.addCategory(Intent.CATEGORY_LAUNCHER)
        val pm = packageManager//creates new package manager
        val packages = pm.getInstalledApplications(PackageManager.GET_META_DATA)//gets the packages
        var applicationInfo: ApplicationInfo// gets all info about application.

        /*
        val availableActivities = manager?.queryIntentActivities(i, 0)
        for (ri in availableActivities!!) {
            ri.activityInfo.loadIcon(manager)
        }
        */


        for (x in packages.indices) {
            //System.out.println("What is x " + x)
            applicationInfo = packages[x] as ApplicationInfo
            val packageName = applicationInfo.packageName
            val appName = applicationInfo.loadLabel(pm).toString()
            val appIcon = applicationInfo.loadIcon(pm)
            var all_perms: ArrayList<String> = ArrayList()
            Log.d("test", "App: $appName Package: $packageName")

            val packageInfo = pm.getPackageInfo(packageName, PackageManager.GET_PERMISSIONS)

            //Get Permissions
            val requestedPermissions = packageInfo.requestedPermissions
            System.out.println(packageInfo.applicationInfo.packageName)
            if (requestedPermissions != null) {
                System.out.println("permission found")
                for (s in requestedPermissions.indices) {
                    Log.d("test", requestedPermissions[s])
                    //System.out.println(requestedPermissions[s])
                    val allPerms: ArrayList<String> = ArrayList()
                    allPerms.add(requestedPermissions[s])
                    all_perms = allPerms
                }
            }
            else{
                System.out.println("no permission")
            }
            val appDetail = AppDetail(appName, packageName, all_perms, appIcon)
            all_apps.add(appDetail)
        }
    }



}
